# -*- coding: utf-8 -*-
"""crop_pbl

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fQiJ7VY4bxkkXOvnTDaHw3-qu5BlS0S1
"""

# Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing
from pandas.plotting import scatter_matrix
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor  # Use RandomForestRegressor for regression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load Dataset
print("Data Set ")
data = pd.read_csv("crop_yield.csv")
new_data = data
print(data)

# Dimension of Dataset
print("------------------------------------------------------------------------")
print("Shape of a Data")
dim = data.shape
print(dim)

# Datatypes
print("------------------------------------------------------------------------")
print("Data Types of each Attribute")
print(data.dtypes)

# Peek at the Dataset
print("------------------------------------------------------------------------")
print("Top values from a dataset")
print(data.head(10))

# Statistical Summary
print("------------------------------------------------------------------------")
print("Describe method")
print(data.describe())

# Check missing values
print("------------------------------------------------------------------------")
print("Check Missing values ")
nullValue = data.isnull().sum()
print(nullValue)

# Crop Distribution
print("------------------------------------------------------------------------")
print(data.groupby('Crop').size())
print("------------------------------------------------------------------------")
print(data.groupby('Crop_Year').size())
print("------------------------------------------------------------------------")
print(data.groupby('State').size())

# Analysis total production of crop per year
print("------------------------------------------------------------------------")
print("Analysis total production of crop per year")
total_prod = data.groupby('Crop_Year')['Production'].sum().sort_values(ascending=False)
print(total_prod)

#Assuming 'data' is your DataFrame
# Extract the year from 'Crop_Year' column (assuming 'Crop_Year' is in a datetime format)
print("------------------------------------------------------------------------")
data['Year'] = data['Crop_Year']

# Group the data by 'Year', 'Season', and 'Crop' and sum the 'Production' for each group

year_season_crop_production = data.groupby(['Year', 'Season', 'Crop'])['Production'].sum().reset_index()
sorted_year_season_crop_production = year_season_crop_production.sort_values(by=['Year', 'Production'], ascending=[False,False])
print(sorted_year_season_crop_production)

# Group the data by 'Crop' and sum the 'Production' for each crop
print("------------------------------------------------------------------------")
crop_prod = data.groupby('Crop')['Production'].sum()
high_crop = crop_prod.idxmax()
high_value = crop_prod.max()
low_crop = crop_prod.idxmin()
low_value = crop_prod.min()

print(f"The crop with the highest production is {high_crop} with a production of {high_value}")
print(f"The crop with the lowest production is {low_crop} with a production of {low_value}")

# Analysis which states are the top producers of specific crops
print("------------------------------------------------------------------------")

unique_crops = data['Crop'].unique()
state_data = []

for crop in unique_crops:
    crop_data = data[data['Crop'] == crop]
    state_production = crop_data.groupby('State')['Production'].sum()
    top_producing_states = state_production.sort_values(ascending=False)
    top_state = top_producing_states.index[0]
    state_data.append({'Crop': crop, 'Top Producing State': top_state})

df = pd.DataFrame(state_data)
print(df)

print("------------------------------------------------------------------------")
print("crop production vary with different seasons")
seasonal_production = data.groupby('Season')['Production'].sum().sort_values(ascending=False)
seasonal_production_df = pd.DataFrame(seasonal_production)
print(seasonal_production_df)

# Analysis average yield for different crops
print("------------------------------------------------------------------------")
print("Analysis average yield for different crops")
average_yield_by_crop = data.groupby('Crop')['Yield'].mean().sort_values(ascending=False)
average_yield_by_crop_df = pd.DataFrame(average_yield_by_crop)
print(average_yield_by_crop_df)

# Calculate the correlation between 'Annual_Rainfall' and 'Production'
print("------------------------------------------------------------------------")
correlation = data['Annual_Rainfall'].corr(data['Production'])
print(f"Correlation between Annual Rainfall and Crop Production: {correlation}")

"""# Visualization"""

# How does crop production change over the years?
year_prod = data.groupby('Crop_Year')['Production'].sum()

plt.figure(figsize=(12,6))
plt.plot(year_prod.index,year_prod.values,marker='o',color='red')
plt.title('Crop Production Over the Years')
plt.xlabel('Year')
plt.ylabel('Production')
plt.show()

#  What are the top crops produced in each state?
state_prod = data.groupby(['State','Crop'])['Production'].sum()
state_prod = state_prod.reset_index()
top_crops_in_states = state_prod.groupby('State').apply(lambda x: x.nlargest(1, 'Production'))
plt.figure(figsize=(12, 6))
plt.bar(top_crops_in_states['State'], top_crops_in_states['Production'], color='b')
plt.title('Top Crops Produced in Each State')
plt.xlabel('State')
plt.ylabel('Production')
plt.xticks(rotation=90)
plt.grid(axis='y')

plt.show()

# Distribution of crop production by year
season_prod = data.groupby('Season')['Production'].sum()
plt.figure(figsize=(8,8))
plt.pie(season_prod, labels=season_prod.index, autopct='%1.1f%%')
plt.title('Distribution of Crop Production by Season')
plt.show()

# Create a scatter plot to visualize the relationship between annual rainfall and crop yield
plt.figure(figsize=(8, 6))
plt.scatter(data['Annual_Rainfall'], data['Yield'], alpha=0.5)
plt.title('Annual Rainfall vs. Crop Yield')
plt.xlabel('Annual Rainfall')
plt.ylabel('Crop Yield')
plt.grid(True)
plt.show()

# Select the columns you want to include in the correlation analysis
selected_columns = ['Production', 'Annual_Rainfall']
selected_data = data[selected_columns]
correlation_matrix = selected_data.corr()

# Create a heatmap to visualize the correlations
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

#  Compare crop production for specific crops in different seasons.
unique_crops = data['Crop'].unique()

# Iterate through each unique crop
for crop in unique_crops:
    crop_data = data[data['Crop'] == crop]

    seasonal_production = crop_data.groupby('Season')['Production'].sum()
    plt.figure(figsize=(10, 6))
    plt.bar(seasonal_production.index, seasonal_production.values, color='b')
    plt.title(f'{crop} Production by Season')
    plt.xlabel('Season')
    plt.ylabel('Production')
    plt.grid(axis='y')
    plt.show()

"""Random Forest

"""

# Label Encoding for 'State', 'Crop', and 'Season'
label_encoder = LabelEncoder()
data['State'] = label_encoder.fit_transform(data['State'])
data['Crop'] = label_encoder.fit_transform(data['Crop'])
data['Season'] = label_encoder.fit_transform(data['Season'])

# Scaling for numerical columns
scaler = StandardScaler()
numerical_cols = ['Crop_Year', 'Area', 'Production', 'Annual_Rainfall', 'Fertilizer', 'Pesticide']
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])

# Split-out validation dataset
X = data.drop(columns=['Yield'])
y = data['Yield']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Create and train the RandomForestRegressor (for regression)
model = RandomForestRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Calculate Mean Squared Error (MSE) and R-squared (accuracy for regression)
mse = mean_squared_error(y_test, y_pred)
r2_accuracy = r2_score(y_test, y_pred)
print("------------------------------------------------------------------------")
print("Mean Squared Error:", mse)
print("R-squared (Accuracy for Regression):", r2_accuracy*100)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)

# Calculate Mean Squared Error (MSE) and R-squared (accuracy for regression)
mse = mean_squared_error(y_test, y_pred)
r2_accuracy = r2_score(y_test, y_pred)
print("------------------------------------------------------------------------")
print("Mean Squared Error:", mse)
print("R-squared (Accuracy for Regression):", r2_accuracy*100)

from sklearn.tree import DecisionTreeRegressor
import pandas as pd

model = DecisionTreeRegressor( random_state=0)
model.fit(X_train, y_train)
y_pred=model.predict(X_test)

# Calculate Mean Squared Error (MSE) and R-squared (accuracy for regression)
mse = mean_squared_error(y_test, y_pred)
r2_accuracy = r2_score(y_test, y_pred)
print("------------------------------------------------------------------------")
print("Mean Squared Error:", mse)
print("R-squared (Accuracy for Regression):", r2_accuracy*100)